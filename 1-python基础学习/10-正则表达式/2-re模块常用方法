1. re.match
    尝试从字符串的起始位置匹配，如果不是起始位置匹配成功的话，match()就返回none。

    1.1 匹配中文
        re.match('^[\u4e00-\u9fa5]{0,}$','中文')

    1.2 匹配 18位的省份证号
        re.match('^([1-9]\d{5})\d{4}(0\d|1[0-2])([0-2]\d|3[0-1])\d{3}([0-9])$','130184198006237035')

    1.3 匹配 邮箱
        re.match(r'^\w{4,15}@(163|qq|sohu)\.(com|cn)$','ffff@163.com')

    1.4 匹配 手机号
        re.match(r'^1[3578]\d{9}','17710567788')

    1.5 匹配 文件的后缀名
        re.match(r'.+\.(.+)','/home/python/hehe.py').group(1)
    
    1.6 验证密码 强度(必须包含数字、字母大小写和'='这个字符)  想要做出 这个题，必须要学会 正则的环视用法。
        re.match(r'^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[=]).{8,16}$',r'ABC1a23123a=')

    1.7 匹配 非负整数
        re.match(r'^\d+$','120')

    1.8 匹配 浮点数 保留2位小数
        re.match('^[0-9]+.[0-9]{2}?$', '0.01')

    1.9 匹配 字符并且 忽略大小写
        re.match('aa','AA',flags=re.I)

    1.10 匹配 域名
        s='http://www.fincm.com/newslist.asp?id=415'
        re.match('^http://.+?/',s)

2. re.search
     扫描整个字符串并返回第一个成功的匹配。

    2.1 匹配 url
        s='<img data-original="https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973_201611131917_small.jpg" src="https://rpic.douyucdn.cn/appCovers/2016/11/13/1213973_201611131917_small.jpg" style="display: inline;">'
        re.search(r'https://.+?\.jpg',s)

3. re.findall
    在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。

    3.1 匹配 单词
        s='hello  world   itcast'
        re.findall(r"\b[a-zA-Z]+\b",s)

    3.2 分组匹配
        re.findall(r'a(.*)bc', 'a\nbc',re.S)
        匹配结果：['\n']

4. re.sub

    4.1. 匹配 域名
        s='http://www.fincm.com/newslist.asp?id=415'
        re.sub(r"(http://.+?/).*", lambda x: x.group(1), s)

    4.2 如何把html标签去掉呢？
        s='''
            <div>
                    <p>岗位职责：</p>
            <p>完成推荐算法、数据统计、接口、后台等服务器端相关工作</p>
            <p><br></p>
            <p>必备要求：</p>
            <p>良好的自我驱动力和职业素养，工作积极主动、结果导向</p>
            <p>&nbsp;<br></p>
            <p>技术要求：</p>
            <p>1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设计模式</p>
            <p>2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架</p>
            <p>3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种<br></p>
            <p>4、掌握NoSQL、MQ，熟练使用对应技术解决方案</p>
            <p>5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js</p>
            <p>&nbsp;<br></p>
            <p>加分项：</p>
            <p>大数据，数理统计，机器学习，sklearn，高性能，大并发。</p>

                    </div>
            '''            
            re.sub(r'<.+?>','',s)  #记得关闭贪婪模式
    
    4.3 如何 替换 某些字符
        In [4]: a = "17710215344"

        In [6]: mobile = re.sub(r'(\d{3})\d{4}(\d{3})', r'\1****\2', a)

        In [7]: mobile
        Out[7]: '177****5344'

5. re.compile
    compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。
    编译一次多次使用，效率更高。

    In [9]: re.split(r" +",s)
    Out[9]: ['hello', 'world', 'itcast']

    In [10]: pattern = re.compile(r'\d+')

    In [11]: pattern.match('123')
    Out[11]: <_sre.SRE_Match object; span=(0, 3), match='123'>

6. re.split

    6.1 匹配 单词
        s='hello  world   itcast'
        re.split(r" +",s)

7. re.finditer
    和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。