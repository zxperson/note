表示字符：
'''  .      匹配任意一个字符(除了\n)
    []      匹配[]中列举的字符(^代表取反)
    \d      匹配数字，0-9
    \D      匹配非数字
    \s      匹配空白，即 空格，tab键等
    \S      匹配非空白
    \w      匹配单词：a-z A-Z 0-9 _
    \W      和 \w 相反
'''
表示数量：
'''
    *       匹配前一个字符出现0次或者无限次，即可有可无
    +       匹配前一个字符出现1次或者无限次，即至少有1次
    ?       匹配前一个字符出现1次或者0次，即要么有1次，要么没有
    {m}     匹配前一个字符出现m次
    {m,}    匹配前一个字符至少出现m次
    {m,n}   匹配前一个字符出现从m到n次
'''
表示边界:
'''
    ^       匹配字符串开头
    $       匹配字符串结尾
    \b      匹配一个单词的边界
    \B      匹配非单词边界
'''

匹配分组:
'''
    |               匹配左右任意一个表达式
    (ab)            将括号中字符作为一个分组, \1 代表第一个分组  \2 代表 第二个分组
    \num            引用分组num匹配到的字符串
    (?P<name>)      分组起别名
    (?P=name)       引用别名为name分组匹配到的字符串
'''

1. 正则表达式修饰符 - 可选标志
    re.I	使匹配对大小写不敏感
    re.M    多行模式
    re.L    表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境
    re.U    表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库
    re.S/re.DOTALL    可以使 . 匹配 换行符 (默认 . 不匹配换行符)
    re.X    为了增加可读性，忽略空格和' # '后面的注释

2. 正则表达式对象
    2.1re.RegexObject
        re.compile() 返回 RegexObject 对象。

    2.2 re.MatchObject
        group() 返回被 RE 匹配的字符串。
        start() 返回匹配开始的位置
        end() 返回匹配结束的位置
        span() 返回一个元组包含匹配 (开始,结束) 的位置


正则表达式--环视：(有待继续研究)

1. 顺序肯定环视 (?=规则)

如果 规则 匹配成功，那么 环视表达式 匹配成功
表示 所在位置 右侧 能够匹配 规则

s = 'Hello, Mr.Gumby : 2017/9/1  Hello,r.Gumby : 2017/9/1'
re.search(r'(?=M)\w+\.\w+',s) ------>  'Mr.Gumby'
re.findall(r'(?=M)\w+\.\w+',s) ----->  ['Mr.Gumby']


2. 顺序否定环视 (?!规则)

如果 规则匹配成功，那么 环视表达式 匹配失败
表示 所在位置 右侧 不能 匹配 规则

s = 'Hello, Mr.Gumby : 2017/9/1  Hello,r.Gumby : 2017/9/1'    
re.search(r'(?!,)\w+\.\w+',s) -------> 'Mr.Gumby'
re.findall(r'(?!,)\w+\.\w+',s) ------> ['Mr.Gumby', 'r.Gumby']

3. 逆序肯定环视 (?<=规则)

如果 规则匹配成功， 那么 环视表达式 匹配成功
表示 所在位置 左侧 能够 匹配 规则

s = 'Hello, Mr.Gumby : 2017/9/1  Hello,r.Gumby : 2017/9/1'
re.search(r'(?<=Hello, )\w+\.\w+',s)   ---->   'Mr.Gumby'
re.findall(r'(?<=Hello, )\w+\.\w+',s)  ----->  ['Mr.Gumby']

4. 逆序否定环视 (?<!规则)

如果 规则匹配成功，那么 环视表达式 匹配失败
表示 所在位置 左侧 不能 匹配 规则

s = 'Hello, Mr.Gumby : 2017/9/1  Hello,r.Gumby : 2017/9/1'
re.search(r'(?<!r)\w+\.\w+',s)   ------>  'Mr.Gumby'
re.findall(r'(?<!r)\w+\.\w+',s)  ------>  ['Mr.Gumby', 'r.Gumby']

